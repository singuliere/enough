---
- include_vars: clouds.yml

- name: Define auth
  os_security_group: &os_auth
    auth:
      auth_url: "{{ clouds.ovh.auth.auth_url }}"
      username: "{{ clouds.ovh.auth.username }}"
      password: "{{ clouds.ovh.auth.password }}"
      project_name: "{{ clouds.ovh.auth.project_name }}"
    region_name: "{{ clouds.ovh.region_name }}"
  when: false

- name: key "{{ state }}"
  os_keypair:
    <<: *os_auth
    state: "{{ state }}"
    name: infrastructure_key
    public_key_file: "{{ ssh_private_keyfile }}.pub"

- name: make a list of volumes
  set_fact:
    volumes_description: |-
      {% if molecule_yml is defined -%}
        {% for p in molecule_yml.platforms -%}
          {% if p.volumes is defined -%}
             {{ p.volumes }} +
          {%- endif %}
        {%- endfor %}
      {%- endif %}[]

- name: display the volumes_description var
  debug:
    msg: "volumes_description: {{ volumes_description }}"

- name: create volumes
  os_volume:
    state: present
    <<: *os_auth
    display_name: "{{ item.name }}"
    size: "{{ item.size }}"
  loop: "{{ volumes_description }}"
  when: state == "present"

- name: instances "{{ state }}"
  os_server:
    state: "{{ state }}"
    <<: *os_auth
    name: "{{ item.name }}"
    image: "{% if item.image is defined %}{{ item.image }}{% else %}Debian 9{% endif %}"
    key_name: infrastructure_key
    timeout: 600
    flavor: "{{ item.flavor }}"
    auto_ip: yes
    wait: true
    volumes: "{% if item.volumes is defined %}{{ item | json_query('volumes[].name') }}{% else %}[]{% endif %}"
    userdata: |
      #cloud-config
      packages:
        - python
      package_upgrade: true
      runcmd:
        - sed -i -e '/^#Port/s/^.*$/Port {% if hosts_orig is defined and item.name in hosts_orig.all.hosts and hosts_orig.all.hosts[item.name].ansible_port is defined %}{{ hosts_orig.all.hosts[item.name].ansible_port }}{% else %}22{% endif %}/' /etc/ssh/sshd_config
        - systemctl restart ssh
    security_groups:
      - "{{ item.name }}"
  loop: "{% if molecule_yml is defined %}{{ molecule_yml.platforms }}{% endif %}{% if vms is defined %}{{ vms }}{% endif %}"
  register: server

- name: destroy volumes
  os_volume:
    state: absent
    <<: *os_auth
    display_name: "{{ item.name }}"
  loop: "{{ volumes_description }}"
  when: state == "absent"

- name: Wait for python on the instances
  command: >
    ssh -oBatchMode=yes -oStrictHostKeyChecking=no
    -p {% if hosts_orig is defined and item.openstack.name in hosts_orig.all.hosts and hosts_orig.all.hosts[item.openstack.name].ansible_port is defined %}{{ hosts_orig.all.hosts[item.openstack.name].ansible_port }}{% else %}22{% endif %}
    -i {{ ssh_private_keyfile }}
    {% if hosts_orig is defined and item.openstack.name in hosts_orig.all.hosts and hosts_orig.all.hosts[item.openstack.name].ansible_user is defined %}{{ hosts_orig.all.hosts[item.openstack.name].ansible_user }}{% else %}debian{% endif %}@{{ item.openstack.public_v4 }} which python
  register: result
  until: result is success
  retries: 30
  delay: 10
  loop: "{{ server.results }}"
  when: state == "present"

- name: Wait for cloud-init ending on the instances
  shell: >
    ssh -oBatchMode=yes -oStrictHostKeyChecking=no
    -p {% if hosts_orig is defined and item.openstack.name in hosts_orig.all.hosts and hosts_orig.all.hosts[item.openstack.name].ansible_port is defined %}{{ hosts_orig.all.hosts[item.openstack.name].ansible_port }}{% else %}22{% endif %}
    -i {{ ssh_private_keyfile }}
    {% if hosts_orig is defined and item.openstack.name in hosts_orig.all.hosts and hosts_orig.all.hosts[item.openstack.name].ansible_user is defined %}{{ hosts_orig.all.hosts[item.openstack.name].ansible_user }}{% else %}debian{% endif %}@{{ item.openstack.public_v4 }} grep -q 'Cloud-init.*finished' /var/log/cloud-init-output.log
  register: result
  until: result is success
  retries: 30
  delay: 10
  loop: "{{ server.results }}"
  when: state == "present"
