# adapted from molecule/cookiecutter/scenario/driver/openstack/{{cookiecutter.molecule_directory}}/{{cookiecutter.scenario_name}}/create.yml
- name: Create
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    molecule_file: "{{ lookup('env', 'MOLECULE_FILE') }}"
    molecule_instance_config: "{{ lookup('env', 'MOLECULE_INSTANCE_CONFIG') }}"
    #
    # obtained manually from api.{{ production_domain }}
    #
    enough_api_token: "{{ lookup('env', 'ENOUGH_API_TOKEN') }}"
    molecule_yml: "{{ lookup('file', molecule_file) | from_yaml }}"
  tasks:

    - name: create instances
      register: out
      shell: |
        python -m enough.internal.cmd host create --format json {{ item.name }}
      loop: "{{ molecule_yml.platforms }}"

    - name: stacks
      set_fact:
        stacks: |
          [
            {% for s in out.results %}
            {{ s.stdout }},
            {% endfor %}
          ]

    - debug:
        var: stacks

    - name: instance configuration for molecule
      set_fact:
        instance_conf: |
          [
            {% for s in stacks %}
            {
               'instance': '{{ s.name }}',
               'address': '{{ s.ip }}',
               'identity_file': '{{ ssh_private_keyfile }}',
               'port': '{{ s.port }}',
               'user': '{{ s.user }}',
            },
            {% endfor %}
          ]

    - name: bind_host_ip
      set_fact:
        bind_host_ip: "{% for s in stacks %}{% if s.name == 'bind-host' %}{{ s.ip }}{% endif %}{% endfor %}"

    - name: set the default domain to enough.community
      copy:
        content: |
          domain: enough.community
        dest: "../../inventory/group_vars/all/domain.yml"

    - block:

        - name: generate subdomain
          shell: date +%s | rev | base32 | tr -d =
          register: cmd

        - set_fact:
            subdomain: "{{ cmd.stdout|lower }}"

        - set_fact:
            domain: "{{ subdomain }}.test.enough.community"

        - name: create DNS delegation for {{ domain }} (requires access to api.{{ production_domain }})
          uri:
            url: https://api.{{ production_domain }}/delegate-test-dns/
            method: POST
            headers:
              Authorization: "Token {{ enough_api_token }}"
            body_format: json
            body: |
              {
                "name": "{{ subdomain }}",
                "ip": "{{ bind_host_ip }}"
              }
            status_code: 201
          register: delegate_dns

        - debug:
            var: delegate_dns.json

        - name: save the test sub-domain
          copy:
            content: |
              domain: {{ domain }}
            dest: "../../inventory/group_vars/all/domain.yml"

      when: bind_host_ip != '' and (letsencrypt_staging | default(false))

    - name: Dump instance config
      copy:
        # NOTE(retr0h): Workaround for Ansible 2.2.
        #               https://github.com/ansible/ansible/issues/20885
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
