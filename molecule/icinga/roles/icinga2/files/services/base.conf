apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address && host.check_command != "ssh"
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
}

/*
object CheckCommand "dhcpsudo" {
	command = [ "sudo", PluginDir + "/check_dhcp" ]
	arguments = {
        "-i" = {
            value = "$dhcp_interface$"
            required = true
        }
        "-r" = {
            value = "$dhcp_requestedip$"
            required = false
        }
    }
}

apply Service "dhcp" {
  import "generic-service"

  check_command = "dhcpsudo"
  vars.dhcp_interface = "ens3"
  vars.dhcp_requestedip = host.address
  command_endpoint = host.vars.client_endpoint

  assign where host.vars.dhcp
}

*/

apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"
  command_endpoint = NodeName

  assign where (host.address || host.address6)
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"
  command_endpoint = host.vars.client_endpoint

  assign where host.address
}

apply Service "load" {
  import "generic-service"

  check_command = "load"
  command_endpoint = host.vars.client_endpoint

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "00:00-03:00"

  assign where host.address
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  assign where host.address
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.vars.client_endpoint

  assign where host.vars.swap
}

apply Service "users" {
  import "generic-service"

  check_command = "users"
  command_endpoint = host.vars.client_endpoint

  assign where host.address
}

apply Service "Running Kernel" {
  import "generic-service"

  check_command = "running_kernel"
  command_endpoint = host.vars.client_endpoint

  assign where host.address
}

object CheckCommand "gitsudo" {
	command = [ "sudo", PluginDir + "/check_git" ]
	arguments = {
        "-g" = {
            value = "$dir$"
            required = true
        }
    }
}

apply Service "Git " for (repo => config in host.vars.repos) {
  import "generic-service"

  check_command = "gitsudo"
  command_endpoint = host.vars.client_endpoint

  vars.dir = config.dir
}

apply Service "Git /etc" {
  import "generic-service"

  check_command = "gitsudo"
  command_endpoint = host.vars.client_endpoint

  vars.dir = "/etc"
  assign where host.address
}

object CheckCommand "grep" {
	command = ["grep", "-q"]
	arguments = {
        "pattern" = {
            value = "$pattern$"
            required = true
            skip_key = true
            order = -1
        }
        "file" = {
            value = "$file$"
            required = true
            skip_key = true
        }
    }
}

apply Service "Process " for (procs => config in host.vars.process) {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  vars += config
}

apply Service "Process fail2ban" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  vars.procs_command = "fail2ban-server"
  vars.procs_critical = "1:1"

  assign where host.address
}

apply Service "Process sshd" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  vars.procs_command = "sshd"
  vars.procs_critical = "1:"

  assign where host.address
}

apply Service "Process rsyslogd" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  vars.procs_command = "rsyslogd"
  vars.procs_critical = "1:1"

  assign where host.address
}

apply Service "Process icinga2" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  vars.procs_command = "icinga2"
  vars.procs_critical = "1:"

  assign where host.address
}

apply Service "Process Cron" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.vars.client_endpoint

  vars.procs_command = "cron"
  vars.procs_critical = "1:"

  assign where host.address
}
