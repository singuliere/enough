---
- name: get gitlab-runner installation script
  get_url:
    url: https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh
    dest: /tmp/script.deb.sh

- name: setup gitlab-runner repository
  shell: |
    bash -x /tmp/script.deb.sh

- name: apt-get install gitlab-runner
  apt:
    name: gitlab-runner=10.4.0
    state: present

- name: hold gitlab-runner
  command: apt-mark hold gitlab-runner

- name: get gitlab API token
  uri:
    url: "http{% if with_https is defined and with_https == true %}s{% endif %}://gitlab.{{ domain }}/api/v3/session"
    method: POST
    body: "login=root&password={{ gitlab_password | urlencode }}"
    status_code: 201
    body_format: json
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: api_token
  until: api_token|succeeded
  retries: 20
  delay: 30
  delegate_to: gitlab-host

- name: get gitlab runner token
  uri:
    url: "http{% if with_https is defined and with_https == true %}s{% endif %}://gitlab.{{ domain }}/api/v3/application/settings"
    method: GET
    status_code: 200
    body_format: json
    headers:
      PRIVATE-TOKEN: "{{ api_token['json']['private_token'] }}"
  register: runners_registration_token
  until: runners_registration_token|succeeded
  retries: 20
  delay: 30
  delegate_to: gitlab-host

- debug:
    var: runners_registration_token

- name: grep sd-runner /etc/gitlab-runner/config.toml
  command: grep -q sd-runner /etc/gitlab-runner/config.toml
  register: result
  ignore_errors: True

- name: apt-get install python-openstackclient
  apt:
    name: python-openstackclient
    state: present

- name: register the runner
  shell: |
    gitlab-runner register \
        --non-interactive \
        --registration-token '{{ runners_registration_token['json']['runners_registration_token'] }}' \
        --name 'sd-runner' \
        --url http{% if with_https is defined and with_https == true %}s{% endif %}://gitlab.{{ domain }} \
        --env OS_AUTH_URL={{ gitlab_os_auth_url }} \
        --env OS_TENANT_NAME={{ gitlab_os_tenant_name }} \
        --env OS_USERNAME={{ gitlab_os_username }} \
        --env OS_PASSWORD={{ gitlab_os_password }} \
        --env OS_REGION_NAME={{ gitlab_os_region_name }} \
        {% if with_fake_LE is defined %}--env GIT_SSL_NO_VERIFY=1{% endif %} \
        --executor docker \
        --docker-image debian:stretch \
        --docker-volumes /srv:/srv \
        --docker-volumes /var/run/docker.sock:/run/docker.sock \
        --docker-volumes /usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \
        --docker-volumes $(which docker):/bin/docker \
        {% if with_fake_LE is defined %}--tls-ca-file /etc/ssl/certs/fakeleintermediatex1.pem{% endif %} \
        --docker-pull-policy if-not-present
  when: result|failed
